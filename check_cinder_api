#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Cinder API monitoring script for Nagios
#
# Authors:
#   Rakesh Patnaik <patsrakesh@gmail.com>
#
# This file is part of nagios-openstack-monitoring
# (https://github.com/rakesh-patnaik/nagios-openstack-monitoring)
#
# nagios-openstack-monitoring is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nagios-openstack-monitoring is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nagios-openstack-monitoring.  If not, see <http://www.gnu.org/licenses/>.>.
#
# Requirments: python-keystoneclient, python-argparse, python

import sys
import argparse
import requests

STATE_OK = 0
STATE_WARNING = 1
STATE_CRITICAL = 2
STATE_UNKNOWN = 3


parser = argparse.ArgumentParser(description='Check OpenStack Cinder API availability.')
parser.add_argument('--auth_url', metavar='URL', type=str,
                    required=True,
                    help='Keystone URL')
parser.add_argument('--username', metavar='username', type=str,
                    required=True,
                    help='username to use for authentication')
parser.add_argument('--password', metavar='password', type=str,
                    required=True,
                    help='password to use for authentication')
parser.add_argument('--tenant', metavar='tenant', type=str,
                    required=True,
                    help='tenant name to use for authentication')
parser.add_argument('--region', metavar='region', type=str,
                    required=False,
                    help='Name of the region as specified in the service catalog that this check needs to be run on.')
parser.add_argument('--req_count', metavar='numberVolumes', type=str,
                    required=False,
                    help='minimum number of volumes required or expected to return')
parser.add_argument('--cinder_url', metavar='http://controller:8776/v1', type=str,
                    required=False,
                    help='Cinder endpoint to use, in stead of the one returned by Keystone.')
parser.add_argument('--insecure', action='store_false', dest='verify',
                    required=False,
                    help='Disable SSL verification.')

args = parser.parse_args()

headers = {'content-type': 'application/json'}

auth_token = None

cinder_url = None 

tenant_id = None

try:

    auth_request = '{"auth":{"tenantName": "' + args.tenant + '", "passwordCredentials": {"username": "' +  args.username + '", "password": "' + args.password + '"}}}'

    auth_response = requests.post(args.auth_url + '/tokens', data=auth_request, headers=headers, verify=args.verify).json();

    if not auth_response['access']['token']['id']:
        raise Exception("Authentication failed. Failed to get an auth token.")

    auth_token = auth_response['access']['token']['id']

    tenant_id = auth_response['access']['token']['tenant']['id']
	
    services = auth_response['access']['serviceCatalog']

    if args.cinder_url is None:
        for service in services:
            if service['type'] == 'volume':
                    if args.region:
                            for region_urls in service['endpoints']:
                                    if region_urls['region'] == args.region:
                                            cinder_url = region_urls['publicURL']
                    else:
                            cinder_url = service['endpoints'][0]['publicURL']
    else:
        cinder_url = args.cinder_url + "/" + tenant_id

    if cinder_url is None:
    	raise Exception("Authentication succeeded but unable to find volume service")

except Exception as e:
    print 'WARNING: Athentication failed for tenant %s and user %s' % (args.tenant, args.username) 
    sys.exit(STATE_WARNING)

headers['X-Auth-Token'] = auth_token  

try:
   cinder_volumes_response = requests.get(cinder_url + '/volumes', headers=headers, verify=args.verify).json()
   volume_count = 0
   for volume in cinder_volumes_response['volumes']:
   	volume_count += 1
   
   if args.req_count and volume_count < int(args.req_count):
   	print "CRITICAL: Number of volumes found: %d less than required %d" % (volume_count, int(args.req_count)) 
   	sys.exit(STATE_CRITICAL)
   
   if args.req_count: 
   	print "OK: Retrieved %d volumes, required %d" % (volume_count, int(args.req_count))
   else:
   	print "OK: Retrieved volumes. Volume count is %d" % (volume_count)
   
except Exception as e:
   print 'CRITICAL:Unable to retrieve volumes for tenant %s' % (args.tenant)
   sys.exit(STATE_CRITICAL)

sys.exit(STATE_OK)
