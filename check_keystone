#!/usr/bin/env python
# -*- encoding: utf-8 -*-
#
# Keystone API monitoring script for Nagios
#
# Authors:
#   Rakesh Patnaik <patsrakesh@gmail.com>
#
# This file is part of nagios-openstack-monitoring
# (https://github.com/rakesh-patnaik/nagios-openstack-monitoring)
#
# nagios-openstack-monitoring is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# nagios-openstack-monitoring is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with nagios-openstack-monitoring.  If not, see <http://www.gnu.org/licenses/>.>.
#
# Requirments: python-keystoneclient, python-argparse, python

import sys
import argparse
import requests

STATE_OK = 0
STATE_CRITICAL = 2

parser = argparse.ArgumentParser(description='Check OpenStack Keystone API for availability.')
parser.add_argument('--auth_url', metavar='URL', type=str,
                    required=True,
                    help='Keystone URL')
parser.add_argument('--username', metavar='username', type=str,
                    required=True,
                    help='username to use for authentication')
parser.add_argument('--password', metavar='password', type=str,
                    required=True,
                    help='password to use for authentication')
parser.add_argument('--tenant', metavar='tenant', type=str,
                    required=True,
                    help='tenant name to use for authentication')
parser.add_argument('--insecure', action='store_false', dest='verify',
                    required=False,
                    help='Disable SSL verification.')
args = parser.parse_args()

headers = {'content-type': 'application/json'}

auth_token = None

try:

    auth_request = '{"auth":{"tenantName": "' + args.tenant + '", "passwordCredentials": {"username": "' +  args.username + '", "password": "' + args.password + '"}}}'

    auth_response = requests.post(args.auth_url + '/tokens', data=auth_request, headers=headers, verify=args.verify).json();

    if not auth_response['access']['token']['id']:
        raise Exception("Authentication failed. Failed to get an auth token.")

    auth_token = auth_response['access']['token']['id']

    if auth_token is None:
        print 'CRITICAL: Failed to generate an auth token for tenant %s and user %s' % (args.tenant, args.username) 
        sys.exit(STATE_CRITICAL)

except Exception as e:
    print 'CRITICAL: Athentication failed for tenant %s and user %s: %s' % (args.tenant, args.username, e.strerror) 
    sys.exit(STATE_CRITICAL)

print 'OK: Successfully generated an auth token for tenant %s and user %s' % (args.tenant, args.username)
sys.exit(STATE_OK)
